;$NONSEGMENTED              ; Nur Tiny Model möglich
$MODV2                 ; Code fuer 161/163/164/165/167
$NOLIST
$INCLUDE (REG167.INC)   ; include CPU definition file 
$LIST
;
;	TITLE <Mein Text>
;
;	Prozessor Definitionen
;
;------------------------------------------------------------
; Hier folgen Ihre Konstanten Definitionen
;
Ora     	EQU	0	;Portbit für Ora

Datenspeicher	SECTION Data
;------------------------------------------------------------
; Hier folgen Ihre Speicher Vereinbarungen
;
Mein_Speicher           DB      12      ;Byte Initialisiert
Mein_Speicher1          DW      65      ;Word Initialisiert
Mein_Speicher2          DD      4711
Mein_Text               DB      'ASCII Text'
op1						DW		30000
op2						DW		5000
op3						DW		40000
op4						DW		4999
op5						DW		-30000
MyVar32_1				DW		(120000 and 0xFFFF)	; untere 16 Bit
						DW		(120000 shr 16)		; ober 16 Bit
MyVar32_2				DW		(75000 and 0xFFFF)
						DW		(75000 shr 16)


Datenspeicher	ENDS
;
;
Programme	Section Code
ASSUME	DPP3:SYSTEM
ASSUME  DPP0:Datenspeicher
;------------------------------------------------------------
; Hier stehen Ihre Unterprogramme
;
;
;PInit	Initialisiert den Port Px
;=====
;	I: nix
;	O: nix
;	Z: Register, die zerstört werden.
;
MyUp1	PROC NEAR

	Ret
MyUp1	EndP;


add32 PROC
	push r0
	push r1
	mov r2,[r0+]
	add r2,[r1+]

	mov r3,[r0]
	addc r3,[r1]
	pop r1
	pop r0
	ret
add32 EndP;



sub32 PROC
	push r0
	push r1
	mov r2,[r0+]
	sub r2,[r1+]

	mov r3,[r0]
	subc r3,[r1]
	pop r1
	pop r0
	ret
sub32 EndP;

;------------------------------------------------------------
; Hier startet das Hauptprogramm
;
A_RESET	PROC TASK STARTUP INTNO RESET = 0
	mov	r0,BUSCON0
	and	r0,#0xFF00
	mov	BUSCON0,r0
	mov	dpp0,#PAG Datenspeicher		;Page von Datenspeicher => DPP0
	mov 	KSCCFG,#0x0003;     		;Module Enable
	mov 	R0,KSCCFG			;wieder ruecklesen
	JMP	Main	
A_RESET	EndP

MAIN	Proc
;------------------------------------------------------------
;Hier geht Ihr Hauptprogramm los
;
	mov r1,op1
	mov r2,op2
	mov r3,op3
	mov r4,op4
	mov r5,op5

    mov r0,#MyVar32_1
	mov r1,#MyVar32_2
	call cc_UC,add32

	call cc_UC,sub32

	mov r0,#MyVar32_2
	mov r1,#MyVar32_1
	call cc_UC,sub32

	Call	MyUp1	

Forever:


	jmp		Forever
;
;  Notstop
;
StopJetzt:	JMP	StopJetzt

Main		ENDP

Programme	ENDS
;

	END
