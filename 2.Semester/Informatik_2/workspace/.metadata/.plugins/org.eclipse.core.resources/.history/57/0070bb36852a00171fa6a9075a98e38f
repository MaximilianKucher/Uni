package aufgabe.sieben;

/**
 * Eine doppelt verkettete Liste.
 * @author Max
 *
 */
public class DoppeltVerketteteListe {
  
  
  
  private ListElement first;
  private ListElement last;
  private int size;
  
  
  
  
  /**
   * Fügt ein neues erstes Element in die Liste ein. Es wird unterschieden ob
   * schon Elemente in der Liste sind oder nicht.
   * @param value Daten für das neue Listenelement.
   */
  public void addFirst(String value) {
    ListElement element = new ListElement();
    element.setData(value);
    if (size > 0) {
      element.setNachfolger(first);
      first.setVorgaenger(element);
      first = element;
    } else {
      assert size == 0;
      first = element;
      last = element;
    }
    size++; 
  }
  
  
  
  
  
  /**
   * Fügt ein neues letztes Element in die Liste ein. Es wird unterschieden ob
   * schon Elemente in der Liste sind oder nicht.
   * @param value Daten für das neue Listenelement.
   */
  public void addLast(String value) {
    ListElement element = new ListElement();
    element.setData(value);
    if (size > 0) {
      element.setVorgaenger(last);
      last.setNachfolger(element);
      last = element;
    } else {
      assert size == 0;
      first = element;
      last = element;
    }
    size++; 
  }
  
  
  
  
  
  /**
   * Fügt ein neues Listenelement an einer beliebigen Position ein.
   * @param index muss größer als 0 sein!
   * @param value Daten für das neue Listenelement.
   */
  public void add(int index, String value) {
    if (index <= 0) {
      throw new IllegalArgumentException("Index muss größer als 0 sein!");
    } else {
      if (index == 1) {
        this.addFirst(value);
      } else if (index >= size) {
        this.addLast(value);
      } else {
        assert (index > 1) & (index < size);
        ListElement iteratorElement = first;
        
        // iterieren bis zur richtigen Position in der Liste 
        while (index > 1) {
          iteratorElement = iteratorElement.getNachfolger();
          index--;
        }
        ListElement newElement = new ListElement();
        newElement.setData(value);
        
        // der Nachfolger des Neuen Elements ist die Position des iteratorElements.
        newElement.setNachfolger(iteratorElement);
        
        // das neue Element wird der Nachfolger des Vorgängerelements
        newElement.getNachfolger().getVorgaenger().setNachfolger(newElement);
        
        /* der Vorgänger des Nachfolgers des neuen Elements wird jetzt der Vorgänger
           des neuen Elements. */
        newElement.setVorgaenger(newElement.getNachfolger().getVorgaenger());
        
        // das neue Element wird der neue Vorgänger seines Nachfolgers.
        newElement.getNachfolger().setVorgaenger(newElement);
        size++;
      } 
    }
  }
  
  
  
  
  
  /**
   * Liest die Daten am übergebenen Index aus.
   * @param index Position des Elements, muss größer als 0 sein!
   * @return daten des Elements an der Stelle index in der Liste.
   */
  public String get(int index) {
    if (index <= 0) {
      throw new IllegalArgumentException("Index muss größer als 0 sein!");
    } else if (index == 1) {
      return first.getData();
    } else if (index == size) {
      return last.getData();
    } else {
      ListElement iteratorElement = first;
      
      /* der Nachfolger des Nachfolgers wird zum neuen Nachfolger bis wir die
         gewünschte Position in der Liste erreicht haben. */
      while (index > 1) {
        iteratorElement = iteratorElement.getNachfolger();
        index--;
      }
 
      return iteratorElement.getData();
    }
  }
  
  
  
  
  
  /**
   * Entfernt das erste Element aus der Liste.
   * @return Daten des ersten Elements.
   */
  public String removeFirst() {
    assert size > 0;
    final String data = first.getData();
    first = first.getNachfolger();
    first.setVorgaenger(null);
    size--;
    return data;
  }
  
  
  
  
  
  /**
   * Entfernt das letzte Element aus der Liste.
   * @return Daten des letzten Elements.
   */
  public String removeLast() {
    assert size > 0;
    final String data = last.getData();
    last = last.getVorgaenger();
    last.setNachfolger(null);
    size--;
    return data;
  }
  
  
  

  public ListElement getFirst() {
    return first;
  }

  public void setFirst(ListElement first) {
    this.first = first;
  }

  public ListElement getLast() {
    return last;
  }

  public void setLast(ListElement last) {
    this.last = last;
  }

  public int getSize() {
    return size;
  }

  public void setSize(int size) {
    this.size = size;
  }
  
  
}
